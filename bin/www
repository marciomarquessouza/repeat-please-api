const app = require('../app');
const debug = require('debug')('repeat-please-api:server');
const http = require('http');
const config = require('../src/config/config');
const mongodb = require('../src/db/mongodb');

/**
 * Get port from environment and store in Express.
 */

const normalizePort = function(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    return val;
  }

  if (port >= 0) {
    return port;
  }

  return false;
};

const port = normalizePort(config.port || '5000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Event listener for HTTP server "error" event.
 */

const onError = (error) => {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? `Pipe  ${port}`
    : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      throw new Error('requires elevated privileges');
    case 'EADDRINUSE':
      throw new Error(`${bind} is already in use`);
    default:
      throw error;
  }
};

/**
 * Event listener for HTTP server "listening" event.
 */

const onListening = () => {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? `pipe ${addr}`
    : `port ${addr.port}`;
  debug(`Listening on ${bind}`);
  console.log('Listening on ' + bind);
};

/**
 * Listen on provided port, on all network interfaces.
 */

mongodb.then((message) => {
  console.log(message);
  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
}).catch((error) => {
  console.log(error.message);  
});
